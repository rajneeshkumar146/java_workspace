package Q001_030;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;

public class Q006_PPATH_PrimePath {
	public static Scanner scn = new Scanner(System.in);

	static int SieveSize;
	static boolean[] prime;

	public static void main(String[] args) throws Exception {
		solve();
	}

	public static void solve() throws Exception {
		int t = scn.nextInt();
		while (t-- > 0) {
			int a = scn.nextInt();
			int b = scn.nextInt();

		}
	}

	private static void ppath(int a, int b) {
		ArrayDeque<Integer> que = new ArrayDeque<>();
		que.addLast(a);

		while (!que.isEmpty()) {
			int num = que.removeFirst();

			for (int i = 1; i <= 4; i++) {
				int quo = num / (int) Math.pow(10, 4 - i);
				for (int digit = 0; digit < 10; digit++) {

				}
			}

		}
	}

	private static void SieveOfErathosthenes(int upperbound) {
		SieveSize = upperbound + 1;
		prime = new boolean[SieveSize];

		Arrays.fill(prime, true);
		prime[0] = prime[1] = false; // not a prime

		for (long i = 2; i < SieveSize; i++) {
			if (prime[(int) i]) { // if it is true then it is a potential prime.
				for (long j = i * i; j < SieveSize; j += i) {
					prime[(int) j] = false;
				}
			}
		}

		// System.out.println(primes);
	}

}
