package Questions.Ch04_Graph.Basics;

import java.util.ArrayList;
import java.util.Scanner;

public class Q001_UVa11902_Dominator {
	public static Scanner scn = new Scanner(System.in);

	public static void main(String[] args) throws Exception {
		solve();
	}

	private static ArrayList<Integer>[] graph;
	private static boolean[] isdone;
	private static int end;
	private static char[][] ans;

	public static void solve() throws Exception {
		int t = scn.nextInt();

		for (int count = 1; count <= t; count++) {
			end = scn.nextInt();
			graph = new ArrayList[end];
			isdone = new boolean[end];
			ans = new char[end][end];

			input();

			for (int i = 1; i < end - 1; i++) {
				boolean res = DFS(0, i);
				for (int j = 0; j < end; j++) {
					if (ans[i][j] == '\u0000') {
						ans[i][j] = res == false ? 'Y' : 'N';
					}
				}

			}

			StringBuilder sb = new StringBuilder();
			sb.append("Case ");
			sb.append(count);
			sb.append(":\n");
			for (int i = 0; i < end; i++) {
				sb.append('+');
				for (int i2 = 2 * end - 1; i2 > 0; i2--) {
					sb.append('-');
				}
				sb.append("+\n|");

				for (int i2 = 0; i2 < end; i2++) {
					if (ans[i][i2] == 'Y') {
						sb.append('Y');
					} else {
						sb.append('N');
					}
					sb.append('|');
				}
				sb.append('\n');
			}
			sb.append('+');
			for (int i = 2 * end - 1; i > 0; i--) {
				sb.append('-');
			}
			sb.append("+\n");

			System.out.print(sb.toString());
		}
	}

	private static boolean DFS(int st, int block) {
		if (st == end - 1) {
			return true;
		}

		isdone[st] = true;
		for (Integer i : graph[st]) {
			if (isdone[i] || i == block) {
				continue;
			}

			return DFS(i, block);
		}

		return false;
	}

	private static void input() {
		for (int i = 0; i < end; i++) {
			graph[i] = new ArrayList<>();
			for (int j = 0; j < end; j++) {
				int n = scn.nextInt();
				if (i == 0) {
					ans[i][j] = 'Y';
				}

				if (n == 0 && i != 0) {
					ans[i][j] = 'N';
				}

				if (i == j) {
					ans[i][j] = 'Y';
				}

				if (n == 1) {
					graph[i].add(j);
				}
			}
		}
	}
}
